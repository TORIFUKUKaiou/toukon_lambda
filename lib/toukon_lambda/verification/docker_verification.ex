defmodule ToukonLambda.Verification.DockerVerification do
  @moduledoc """
  üî• Docker/RIEÁí∞Â¢É„Åß„ÅÆÊ§úË®ºÊ©üËÉΩ

  Docker„Ç≥„É≥„ÉÜ„Éä„ÅÆ„Éì„É´„Éâ„ÄÅËµ∑Âãï„ÄÅ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ„ÇíÊèê‰æõ
  """

  require Logger
  alias ToukonLambda.Verification.TestUtils

  @docker_image_name "toukon-lambda"
  @container_name "toukon-lambda-test"
  @rie_port 8080
  @health_check_timeout 30_000
  @health_check_interval 1_000

  @doc """
  Docker„Ç§„É°„Éº„Ç∏„Çí„Éì„É´„Éâ„Åô„Çã
  """
  def build_docker_image(options \\ []) do
    TestUtils.log_info("üî• Docker„Ç§„É°„Éº„Ç∏„Éì„É´„ÉâÈñãÂßã", %{image: @docker_image_name})

    build_args = get_build_args(options)

    case System.cmd("docker", ["build", "-t", @docker_image_name] ++ build_args ++ ["."],
           stderr_to_stdout: true
         ) do
      {output, 0} ->
        TestUtils.log_info("üî• Docker„Ç§„É°„Éº„Ç∏„Éì„É´„ÉâÊàêÂäü", %{
          image: @docker_image_name,
          output: String.slice(output, -500, 500)
        })

        {:ok, output}

      {output, exit_code} ->
        TestUtils.log_error("üí• Docker„Ç§„É°„Éº„Ç∏„Éì„É´„ÉâÂ§±Êïó", %{
          image: @docker_image_name,
          exit_code: exit_code,
          output: output
        })

        {:error, {:build_failed, exit_code, output}}
    end
  end

  @doc """
  RIE„Åß„Ç≥„É≥„ÉÜ„Éä„ÇíËµ∑Âãï„Åô„Çã
  """
  def start_container_with_rie(options \\ []) do
    TestUtils.log_info("üî• RIE„Ç≥„É≥„ÉÜ„ÉäËµ∑ÂãïÈñãÂßã", %{
      container: @container_name,
      port: @rie_port
    })

    # Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÇíÂÅúÊ≠¢„ÉªÂâäÈô§
    stop_and_remove_container()

    docker_args = build_docker_run_args(options)

    case System.cmd("docker", docker_args, stderr_to_stdout: true) do
      {output, 0} ->
        TestUtils.log_info("üî• RIE„Ç≥„É≥„ÉÜ„ÉäËµ∑ÂãïÊàêÂäü", %{
          container: @container_name,
          output: String.slice(output, -200, 200)
        })

        # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
        case wait_for_container_health() do
          :ok ->
            {:ok, %{container_name: @container_name, port: @rie_port}}

          {:error, reason} ->
            stop_and_remove_container()
            {:error, reason}
        end

      {output, exit_code} ->
        TestUtils.log_error("üí• RIE„Ç≥„É≥„ÉÜ„ÉäËµ∑ÂãïÂ§±Êïó", %{
          container: @container_name,
          exit_code: exit_code,
          output: output
        })

        {:error, {:container_start_failed, exit_code, output}}
    end
  end

  @doc """
  „Ç≥„É≥„ÉÜ„Éä„ÅÆ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å„Åô„Çã
  """
  def check_container_health(container_name \\ @container_name) do
    TestUtils.log_info("üî• „Ç≥„É≥„ÉÜ„Éä„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã", %{container: container_name})

    # „Ç≥„É≥„ÉÜ„Éä„ÅåÂÆüË°å‰∏≠„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    case System.cmd("docker", ["ps", "-q", "-f", "name=#{container_name}"],
           stderr_to_stdout: true
         ) do
      {"", 0} ->
        {:error, :container_not_running}

      {_container_id, 0} ->
        # HTTPÁµåÁî±„Åß„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        check_lambda_endpoint_health()

      {output, exit_code} ->
        TestUtils.log_error("üí• „Ç≥„É≥„ÉÜ„ÉäÁä∂ÊÖãÁ¢∫Ë™çÂ§±Êïó", %{
          container: container_name,
          exit_code: exit_code,
          output: output
        })

        {:error, {:health_check_failed, exit_code, output}}
    end
  end

  @doc """
  „Ç≥„É≥„ÉÜ„Éä„ÇíÂÅúÊ≠¢„ÉªÂâäÈô§„Åô„Çã
  """
  def stop_and_remove_container(container_name \\ @container_name) do
    TestUtils.log_info("üî• „Ç≥„É≥„ÉÜ„ÉäÂÅúÊ≠¢„ÉªÂâäÈô§", %{container: container_name})

    # „Ç≥„É≥„ÉÜ„ÉäÂÅúÊ≠¢
    System.cmd("docker", ["stop", container_name], stderr_to_stdout: true)

    # „Ç≥„É≥„ÉÜ„ÉäÂâäÈô§
    System.cmd("docker", ["rm", container_name], stderr_to_stdout: true)

    :ok
  end

  @doc """
  „Ç≥„É≥„ÉÜ„Éä„ÅÆ„É≠„Ç∞„ÇíÂèñÂæó„Åô„Çã
  """
  def get_container_logs(container_name \\ @container_name, options \\ []) do
    log_args = build_log_args(options)

    case System.cmd("docker", ["logs"] ++ log_args ++ [container_name], stderr_to_stdout: true) do
      {logs, 0} ->
        {:ok, logs}

      {output, exit_code} ->
        TestUtils.log_error("üí• „Ç≥„É≥„ÉÜ„Éä„É≠„Ç∞ÂèñÂæóÂ§±Êïó", %{
          container: container_name,
          exit_code: exit_code,
          output: output
        })

        {:error, {:log_fetch_failed, exit_code, output}}
    end
  end

  # „Éó„É©„Ç§„Éô„Éº„ÉàÈñ¢Êï∞

  defp get_build_args(options) do
    build_args = []

    # „Éì„É´„ÉâÂºïÊï∞„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
    if build_arg = Keyword.get(options, :build_arg) do
      ["--build-arg", build_arg] ++ build_args
    else
      build_args
    end
  end

  defp build_docker_run_args(options) do
    base_args = [
      "run",
      # „Éá„Çø„ÉÉ„ÉÅ„É¢„Éº„Éâ
      "-d",
      "--name",
      @container_name,
      "-p",
      "#{@rie_port}:8080"
    ]

    # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
    env_args = get_env_args(options)

    # „Éú„É™„É•„Éº„É†„Éû„Ç¶„É≥„ÉàË®≠ÂÆö
    volume_args = get_volume_args(options)

    base_args ++ env_args ++ volume_args ++ [@docker_image_name]
  end

  defp get_env_args(options) do
    env_vars = Keyword.get(options, :env_vars, [])

    Enum.flat_map(env_vars, fn {key, value} ->
      ["-e", "#{key}=#{value}"]
    end)
  end

  defp get_volume_args(options) do
    volumes = Keyword.get(options, :volumes, [])

    Enum.flat_map(volumes, fn {host_path, container_path} ->
      ["-v", "#{host_path}:#{container_path}"]
    end)
  end

  defp wait_for_container_health do
    TestUtils.log_info("üî• „Ç≥„É≥„ÉÜ„Éä„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂæÖÊ©üÈñãÂßã", %{
      timeout: @health_check_timeout,
      interval: @health_check_interval
    })

    end_time = System.monotonic_time(:millisecond) + @health_check_timeout

    wait_for_health_loop(end_time)
  end

  defp wait_for_health_loop(end_time) do
    current_time = System.monotonic_time(:millisecond)

    if current_time >= end_time do
      TestUtils.log_error("üí• „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Çø„Ç§„É†„Ç¢„Ç¶„Éà", %{
        timeout: @health_check_timeout
      })

      {:error, :health_check_timeout}
    else
      case check_lambda_endpoint_health() do
        :ok ->
          TestUtils.log_info("üî• „Ç≥„É≥„ÉÜ„Éä„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÊàêÂäü", %{})
          :ok

        {:error, _reason} ->
          Process.sleep(@health_check_interval)
          wait_for_health_loop(end_time)
      end
    end
  end

  defp check_lambda_endpoint_health do
    url = "http://localhost:#{@rie_port}/2015-03-31/functions/function/invocations"

    # Á∞°Âçò„Å™„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁî®„ÅÆ„Éö„Ç§„É≠„Éº„Éâ
    payload = %{
      "test_type" => "health_check",
      "timestamp" => DateTime.utc_now() |> DateTime.to_iso8601()
    }

    case Req.post(url,
           json: payload,
           receive_timeout: 5_000
         ) do
      {:ok, %{status: status_code}} when status_code in 200..299 ->
        :ok

      {:ok, %{status: status_code, body: body}} ->
        TestUtils.log_error("üí• Lambda „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Ç®„É©„Éº", %{
          status_code: status_code,
          body: String.slice(body, 0, 200)
        })

        {:error, {:http_error, status_code, body}}

      {:error, exception} ->
        {:error, {:request_failed, exception}}
    end
  end

  defp build_log_args(options) do
    args = []

    # „É≠„Ç∞„ÅÆË°åÊï∞Âà∂Èôê
    args =
      if tail = Keyword.get(options, :tail) do
        ["--tail", to_string(tail)] ++ args
      else
        args
      end

    # „Çø„Ç§„É†„Çπ„Çø„É≥„ÉóË°®Á§∫
    args =
      if Keyword.get(options, :timestamps, false) do
        ["--timestamps"] ++ args
      else
        args
      end

    # „Éï„Ç©„É≠„Éº„É¢„Éº„Éâ
    args =
      if Keyword.get(options, :follow, false) do
        ["--follow"] ++ args
      else
        args
      end

    args
  end
end
