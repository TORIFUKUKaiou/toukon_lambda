# 🔥 最適化版Dockerfile - サイズ削減とパフォーマンス向上
# マルチステージビルド + Alpine最適化 + 不要パッケージ削除

# === ビルドステージ（開発用ツール含む） ===
FROM hexpm/elixir:1.18.4-erlang-28.0.2-alpine-3.22.1 AS builder

# 作業ディレクトリ設定
WORKDIR /app

# ビルド依存関係を一度にインストール（レイヤー最適化）
RUN apk add --no-cache --virtual .build-deps \
    build-base \
    git \
    curl && \
    apk add --no-cache \
    libstdc++ \
    libgcc

# Mix設定（非対話モード + 最適化）
ENV DEBIAN_FRONTEND=noninteractive \
    TERM=xterm \
    MIX_ENV=prod \
    ERL_FLAGS="+JPperf true" \
    ELIXIR_ERL_OPTIONS="+JPperf true"

RUN mix local.hex --force && \
    mix local.rebar --force

# 依存関係ファイルをコピー（キャッシュ効率化）
COPY mix.exs mix.lock ./

# 本番用依存関係を取得・コンパイル（一括処理）
RUN mix deps.get --only prod && \
    mix deps.compile

# アプリケーションコードをコピー
COPY config ./config
COPY lib ./lib

# アプリケーションをコンパイル + リリースビルド（最適化フラグ）
RUN mix compile && \
    mix release --overwrite

# 不要なビルド依存関係を削除（サイズ削減）
RUN apk del .build-deps

# === 超軽量ランタイムステージ ===
FROM alpine:3.22.1 AS runtime

# 最小限のランタイム依存関係のみ（サイズ最重視）
RUN apk add --no-cache \
    openssl \
    ncurses-libs \
    libstdc++ \
    libgcc \
    ca-certificates

# AWS Lambda RIE（軽量版）を条件付きでインストール
ARG INSTALL_RIE=true
RUN if [ "$INSTALL_RIE" = "true" ]; then \
        wget -O /usr/local/bin/aws-lambda-rie \
        https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie && \
        chmod +x /usr/local/bin/aws-lambda-rie; \
    fi

# 作業ディレクトリ設定
WORKDIR /var/task

# ビルドしたリリースをコピー（最小限）
COPY --from=builder /app/_build/prod/rel/toukon_lambda ./

# Lambda用ブートストラップスクリプトをコピー
COPY bootstrap /var/task/bootstrap
RUN chmod +x /var/task/bootstrap

# 環境変数設定（最適化）
ENV PATH="/var/task/bin:$PATH" \
    ERL_FLAGS="+JPperf true" \
    ELIXIR_ERL_OPTIONS="+JPperf true"

# 不要なファイルを削除（追加サイズ削減）
RUN find /var/task -name "*.beam.cache" -delete && \
    find /var/task -name "*.app.src" -delete && \
    rm -rf /var/task/releases/*/lib/*/src 2>/dev/null || true

# エントリポイント設定
ENTRYPOINT ["/var/task/bootstrap"]
